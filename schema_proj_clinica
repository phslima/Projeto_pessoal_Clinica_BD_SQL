--
-- PostgreSQL database dump
--

-- Dumped from database version 17.5
-- Dumped by pg_dump version 17.5

-- Started on 2025-08-31 16:56:48

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 228 (class 1255 OID 16533)
-- Name: fn_impedir_excl_agenda(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.fn_impedir_excl_agenda() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    -- Se a consulta ainda estiver ativa
    IF OLD.status = 'A' THEN
        -- E se ainda não tiver sido cancelada formalmente
        IF OLD.dt_cancelamento IS NULL THEN
            RAISE EXCEPTION 'Não é possível deletar consultas ativas (id_consulta=%)', OLD.id_consulta;
        END IF;
    END IF;

    -- Caso contrário, permite o delete normalmente
    RETURN OLD;
END;
$$;


ALTER FUNCTION public.fn_impedir_excl_agenda() OWNER TO postgres;

--
-- TOC entry 230 (class 1255 OID 16541)
-- Name: obter_desc_espec_med(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.obter_desc_espec_med(p_id_medico integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_especialidade VARCHAR;
BEGIN
    SELECT especialidade INTO v_especialidade
    FROM medico
    WHERE id_medico = p_id_medico;

    RETURN v_especialidade;
END;
$$;


ALTER FUNCTION public.obter_desc_espec_med(p_id_medico integer) OWNER TO postgres;

--
-- TOC entry 229 (class 1255 OID 16536)
-- Name: obter_nome_medico(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.obter_nome_medico(p_id_medico integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
    nome VARCHAR;
BEGIN
    SELECT nm_medico INTO nome
    FROM medico
    WHERE id_medico = p_id_medico;

    RETURN nome;
END;
$$;


ALTER FUNCTION public.obter_nome_medico(p_id_medico integer) OWNER TO postgres;

--
-- TOC entry 231 (class 1255 OID 16540)
-- Name: obter_nome_paciente(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.obter_nome_paciente(p_id_paciente integer) RETURNS character varying
    LANGUAGE plpgsql
    AS $$
DECLARE
    v_nm_paciente VARCHAR;
BEGIN
    SELECT nm_paciente INTO v_nm_paciente
    FROM paciente
    WHERE id_paciente = p_id_paciente;

    RETURN v_nm_paciente;
END;
$$;


ALTER FUNCTION public.obter_nome_paciente(p_id_paciente integer) OWNER TO postgres;

--
-- TOC entry 244 (class 1255 OID 16519)
-- Name: proc_agendar_paciente(integer, integer, timestamp without time zone); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.proc_agendar_paciente(IN p_id_paciente integer, IN p_id_medico integer, IN p_dt_hora_consulta timestamp without time zone)
    LANGUAGE plpgsql
    AS $$DECLARE
    v_idade INT;
    v_especialidade TEXT;
    v_nm_paciente TEXT;
    v_nm_medico TEXT;
    v_sexo CHARACTER VARYING;
BEGIN    
    -- Busca as informações do médico e paciente em uma única consulta
    SELECT m.especialidade, m.nm_medico, p.nm_paciente, p.sexo, DATE_PART('year', AGE(current_date, p.dt_nascimento)) AS idade
    INTO v_especialidade, v_nm_medico, v_nm_paciente, v_sexo, v_idade
    FROM medico m
    JOIN paciente p ON p.id_paciente = p_id_paciente
    WHERE m.id_medico = p_id_medico;

    -- Verifica se o médico ou paciente não foram encontrados
    IF v_especialidade IS NULL OR v_nm_medico IS NULL OR v_nm_paciente IS NULL THEN
        RAISE EXCEPTION 'Médico ou Paciente não encontrado para os IDs fornecidos: Médico ID % / Paciente ID %', p_id_medico, p_id_paciente;
    END IF;

    -- Verifica se já existe consulta para o médico no mesmo horário
    IF EXISTS (
        SELECT 1
        FROM consulta 
        WHERE id_medico = p_id_medico
          AND dt_hora_consulta = p_dt_hora_consulta
    ) THEN 
        RAISE EXCEPTION 'Já existe uma consulta para o médico % (ID %) neste horário %', v_nm_medico, p_id_medico, p_dt_hora_consulta;
    END IF;

    -- Verifica se paciente já tem consulta no mesmo horário
    IF EXISTS(
       SELECT 1
       FROM consulta
       WHERE id_paciente = p_id_paciente
       and dt_hora_consulta = p_dt_hora_consulta
    ) THEN
        RAISE EXCEPTION 'Já existe uma consulta para o paciente % neste horário %', v_nm_paciente, p_dt_hora_consulta;
    END IF;

    -- Validações para idade e especialidade
    IF v_idade >= 18 AND v_especialidade = 'Pediatria' THEN
        RAISE EXCEPTION 'Paciente % (idade % anos) não pode ser atendido por médico % (Pediatria)', v_nm_paciente, v_idade, v_nm_medico;
    END IF;

    -- Verifica se sexo do paciente é compatível com a especialidade
    IF v_sexo = 'F' AND v_especialidade = 'Urologia' THEN
        RAISE EXCEPTION 'Paciente % (sexo % e idade % anos) não pode ser atendido por médico % (Urologia)', v_nm_paciente, v_sexo, v_idade, v_nm_medico;
    END IF;

    IF v_sexo = 'M' AND v_especialidade = 'Ginecologia' THEN
        RAISE EXCEPTION 'Paciente % (sexo % e idade % anos) não pode ser atendido por médico % (Ginecologia)', v_nm_paciente, v_sexo, v_idade, v_nm_medico;
    END IF;

    -- Inserção da consulta
    INSERT INTO consulta (id_paciente, id_medico, dt_hora_consulta, status, dt_atualizacao)
    VALUES (p_id_paciente, p_id_medico, p_dt_hora_consulta, 'A', current_timestamp);

    -- Retorno para o usuário
    RAISE NOTICE 'Consulta agendada com sucesso para paciente % (idade % anos) com médico % (%), horário %',
        v_nm_paciente, v_idade, v_nm_medico, v_especialidade, p_dt_hora_consulta;

EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Erro inesperado: %', SQLERRM;  -- Levanta a exceção original para notificar o erro
END;$$;


ALTER PROCEDURE public.proc_agendar_paciente(IN p_id_paciente integer, IN p_id_medico integer, IN p_dt_hora_consulta timestamp without time zone) OWNER TO postgres;

--
-- TOC entry 243 (class 1255 OID 16603)
-- Name: proc_cancelar_consulta(integer, character varying); Type: PROCEDURE; Schema: public; Owner: postgres
--

CREATE PROCEDURE public.proc_cancelar_consulta(IN p_id_consulta integer, IN p_motivo character varying)
    LANGUAGE plpgsql
    AS $$
DECLARE

v_id_paciente int;
v_id_medico int;
v_dt_hora_consulta timestamp;
v_id_usuario int := 6;

BEGIN
   -- Verifica se a consulta existe e está ativa
   IF NOT EXISTS (
       SELECT 1 FROM consulta 
        WHERE id_consulta = p_id_consulta 
          AND status = 'A'
   ) THEN
       RAISE EXCEPTION 'Consulta não encontrada ou já cancelada/finalizada!';
   END IF;
   
   -- Obtém as informações da consulta (paciente, médico, horário)
    SELECT id_paciente, id_medico, dt_hora_consulta
    INTO v_id_paciente, v_id_medico, v_dt_hora_consulta
    FROM consulta
    WHERE id_consulta = p_id_consulta;
  
   -- Verifica se o usuário existe e a função = 'recepcionista'
   IF NOT EXISTS (
       SELECT 1 
	   FROM usuario 
	   WHERE id_usuario = v_id_usuario 
	   and ds_funcao = 'recepcionista'
   ) THEN
       RAISE EXCEPTION 'Usuário informado não existe ou não tem permissão para realizar ação solicitada';
   END IF;
   
   
   -- Valida se o motivo foi informado
    IF p_motivo IS NULL OR TRIM(p_motivo) = '' THEN
        RAISE EXCEPTION 'Motivo de cancelamento é obrigatório!';
    END IF;
	
   -- Atualiza a consulta
   UPDATE consulta
   SET status             = 'C',
       dt_cancelamento    = NOW(),
       motivo_cancelamento = p_motivo,
       id_usuario_alteracao = v_id_usuario,
       dt_atualizacao     = NOW()
   WHERE id_consulta = p_id_consulta;

   --Retorno para usuário
    RAISE NOTICE 'Consulta cancelada com sucesso para paciente % com médico %, horário %', v_id_paciente, v_id_medico, v_dt_hora_consulta;
   
END;
$$;


ALTER PROCEDURE public.proc_cancelar_consulta(IN p_id_consulta integer, IN p_motivo character varying) OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- TOC entry 224 (class 1259 OID 16482)
-- Name: consulta; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.consulta (
    id_consulta integer NOT NULL,
    id_paciente integer NOT NULL,
    id_medico integer NOT NULL,
    dt_hora_consulta timestamp without time zone NOT NULL,
    status character(1) NOT NULL,
    dt_atualizacao timestamp without time zone DEFAULT now(),
    dt_cancelamento timestamp without time zone,
    id_usuario_alteracao integer,
    motivo_cancelamento character varying(40),
    CONSTRAINT consulta_status_check CHECK ((status = ANY (ARRAY['A'::bpchar, 'C'::bpchar, 'F'::bpchar])))
);


ALTER TABLE public.consulta OWNER TO postgres;

--
-- TOC entry 223 (class 1259 OID 16481)
-- Name: consulta_id_consulta_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.consulta_id_consulta_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.consulta_id_consulta_seq OWNER TO postgres;

--
-- TOC entry 4952 (class 0 OID 0)
-- Dependencies: 223
-- Name: consulta_id_consulta_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.consulta_id_consulta_seq OWNED BY public.consulta.id_consulta;


--
-- TOC entry 220 (class 1259 OID 16430)
-- Name: medico; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.medico (
    id_medico integer NOT NULL,
    nm_medico character varying(30) NOT NULL,
    especialidade character varying(30)
);


ALTER TABLE public.medico OWNER TO postgres;

--
-- TOC entry 219 (class 1259 OID 16429)
-- Name: medico_id_medico_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.medico_id_medico_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.medico_id_medico_seq OWNER TO postgres;

--
-- TOC entry 4953 (class 0 OID 0)
-- Dependencies: 219
-- Name: medico_id_medico_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.medico_id_medico_seq OWNED BY public.medico.id_medico;


--
-- TOC entry 218 (class 1259 OID 16422)
-- Name: paciente; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.paciente (
    id_paciente integer NOT NULL,
    nm_paciente character varying(30) NOT NULL,
    cpf character varying(15) NOT NULL,
    dt_nascimento date NOT NULL,
    sexo character varying(1),
    CONSTRAINT paciente_sexo_check CHECK (((sexo)::text = ANY ((ARRAY['F'::character varying, 'M'::character varying])::text[])))
);


ALTER TABLE public.paciente OWNER TO postgres;

--
-- TOC entry 217 (class 1259 OID 16421)
-- Name: paciente_id_paciente_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.paciente_id_paciente_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.paciente_id_paciente_seq OWNER TO postgres;

--
-- TOC entry 4954 (class 0 OID 0)
-- Dependencies: 217
-- Name: paciente_id_paciente_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.paciente_id_paciente_seq OWNED BY public.paciente.id_paciente;


--
-- TOC entry 222 (class 1259 OID 16437)
-- Name: usuario; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.usuario (
    id_usuario integer NOT NULL,
    login character varying(10) NOT NULL,
    senha character varying(255) NOT NULL,
    ds_funcao character varying(20) NOT NULL
);


ALTER TABLE public.usuario OWNER TO postgres;

--
-- TOC entry 221 (class 1259 OID 16436)
-- Name: usuario_id_usuario_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.usuario_id_usuario_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.usuario_id_usuario_seq OWNER TO postgres;

--
-- TOC entry 4955 (class 0 OID 0)
-- Dependencies: 221
-- Name: usuario_id_usuario_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.usuario_id_usuario_seq OWNED BY public.usuario.id_usuario;


--
-- TOC entry 227 (class 1259 OID 16589)
-- Name: v_consulta_canc; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.v_consulta_canc AS
 SELECT a.id_paciente,
    public.obter_nome_paciente(a.id_paciente) AS nm_paciente,
    b.cpf AS cpf_paciente,
    (date_part('year'::text, age((CURRENT_DATE)::timestamp with time zone, (b.dt_nascimento)::timestamp with time zone)))::integer AS idade_paciente,
    a.id_medico,
    public.obter_nome_medico(a.id_medico) AS nm_medico,
    public.obter_desc_espec_med(a.id_medico) AS espec_medico,
    a.dt_hora_consulta AS dt_horario_consulta,
    a.status AS status_agendamento,
    a.dt_cancelamento,
    a.id_usuario_alteracao,
    a.motivo_cancelamento
   FROM ((public.consulta a
     JOIN public.paciente b ON ((a.id_paciente = b.id_paciente)))
     JOIN public.medico c ON ((a.id_medico = c.id_medico)))
  WHERE (a.status = 'C'::bpchar)
  ORDER BY a.dt_hora_consulta;


ALTER VIEW public.v_consulta_canc OWNER TO postgres;

--
-- TOC entry 225 (class 1259 OID 16579)
-- Name: v_consulta_fem; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.v_consulta_fem AS
 SELECT a.id_paciente,
    public.obter_nome_paciente(a.id_paciente) AS nm_paciente,
    b.cpf AS cpf_paciente,
    (date_part('year'::text, age((CURRENT_DATE)::timestamp with time zone, (b.dt_nascimento)::timestamp with time zone)))::integer AS idade_paciente,
    a.id_medico,
    public.obter_nome_medico(a.id_medico) AS nm_medico,
    public.obter_desc_espec_med(a.id_medico) AS espec_medico,
    a.dt_hora_consulta AS dt_horario_consulta,
    a.status AS status_agendamento
   FROM ((public.consulta a
     JOIN public.paciente b ON (((a.id_paciente = b.id_paciente) AND ((b.sexo)::text = 'F'::text) AND ((date_part('year'::text, age((CURRENT_DATE)::timestamp with time zone, (b.dt_nascimento)::timestamp with time zone)))::integer > 18))))
     JOIN public.medico c ON ((a.id_medico = c.id_medico)))
  WHERE (a.status = 'A'::bpchar)
  ORDER BY a.dt_hora_consulta;


ALTER VIEW public.v_consulta_fem OWNER TO postgres;

--
-- TOC entry 226 (class 1259 OID 16584)
-- Name: v_consulta_masc; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.v_consulta_masc AS
 SELECT a.id_paciente,
    public.obter_nome_paciente(a.id_paciente) AS nm_paciente,
    b.cpf AS cpf_paciente,
    (date_part('year'::text, age((CURRENT_DATE)::timestamp with time zone, (b.dt_nascimento)::timestamp with time zone)))::integer AS idade_paciente,
    a.id_medico,
    public.obter_nome_medico(a.id_medico) AS nm_medico,
    public.obter_desc_espec_med(a.id_medico) AS espec_medico,
    a.dt_hora_consulta AS dt_horario_consulta,
    a.status AS status_agendamento
   FROM ((public.consulta a
     JOIN public.paciente b ON (((a.id_paciente = b.id_paciente) AND ((b.sexo)::text = 'M'::text) AND ((date_part('year'::text, age((CURRENT_DATE)::timestamp with time zone, (b.dt_nascimento)::timestamp with time zone)))::integer > 18))))
     JOIN public.medico c ON ((a.id_medico = c.id_medico)))
  WHERE (a.status = 'A'::bpchar)
  ORDER BY a.dt_hora_consulta;


ALTER VIEW public.v_consulta_masc OWNER TO postgres;

--
-- TOC entry 4778 (class 2604 OID 16485)
-- Name: consulta id_consulta; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.consulta ALTER COLUMN id_consulta SET DEFAULT nextval('public.consulta_id_consulta_seq'::regclass);


--
-- TOC entry 4776 (class 2604 OID 16433)
-- Name: medico id_medico; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.medico ALTER COLUMN id_medico SET DEFAULT nextval('public.medico_id_medico_seq'::regclass);


--
-- TOC entry 4775 (class 2604 OID 16425)
-- Name: paciente id_paciente; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.paciente ALTER COLUMN id_paciente SET DEFAULT nextval('public.paciente_id_paciente_seq'::regclass);


--
-- TOC entry 4777 (class 2604 OID 16440)
-- Name: usuario id_usuario; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuario ALTER COLUMN id_usuario SET DEFAULT nextval('public.usuario_id_usuario_seq'::regclass);


--
-- TOC entry 4792 (class 2606 OID 16488)
-- Name: consulta consulta_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.consulta
    ADD CONSTRAINT consulta_pkey PRIMARY KEY (id_consulta);


--
-- TOC entry 4788 (class 2606 OID 16435)
-- Name: medico medico_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.medico
    ADD CONSTRAINT medico_pkey PRIMARY KEY (id_medico);


--
-- TOC entry 4783 (class 2606 OID 16428)
-- Name: paciente paciente_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.paciente
    ADD CONSTRAINT paciente_pkey PRIMARY KEY (id_paciente);


--
-- TOC entry 4785 (class 2606 OID 16578)
-- Name: paciente unique_cpf; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.paciente
    ADD CONSTRAINT unique_cpf UNIQUE (cpf);


--
-- TOC entry 4790 (class 2606 OID 16442)
-- Name: usuario usuario_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.usuario
    ADD CONSTRAINT usuario_pkey PRIMARY KEY (id_usuario);


--
-- TOC entry 4793 (class 1259 OID 16596)
-- Name: idx_dt_hora_consulta; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_dt_hora_consulta ON public.consulta USING btree (dt_hora_consulta);


--
-- TOC entry 4786 (class 1259 OID 16595)
-- Name: idx_id_medico; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_id_medico ON public.medico USING btree (id_medico);


--
-- TOC entry 4794 (class 1259 OID 16594)
-- Name: idx_id_paciente; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_id_paciente ON public.consulta USING btree (id_paciente);


--
-- TOC entry 4798 (class 2620 OID 16534)
-- Name: consulta tg_impedir_excl_agenda; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER tg_impedir_excl_agenda BEFORE DELETE ON public.consulta FOR EACH ROW EXECUTE FUNCTION public.fn_impedir_excl_agenda();


--
-- TOC entry 4795 (class 2606 OID 16494)
-- Name: consulta consulta_id_medico_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.consulta
    ADD CONSTRAINT consulta_id_medico_fkey FOREIGN KEY (id_medico) REFERENCES public.medico(id_medico);


--
-- TOC entry 4796 (class 2606 OID 16489)
-- Name: consulta consulta_id_paciente_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.consulta
    ADD CONSTRAINT consulta_id_paciente_fkey FOREIGN KEY (id_paciente) REFERENCES public.paciente(id_paciente);


--
-- TOC entry 4797 (class 2606 OID 16524)
-- Name: consulta fk_usuario_alteracao; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.consulta
    ADD CONSTRAINT fk_usuario_alteracao FOREIGN KEY (id_usuario_alteracao) REFERENCES public.usuario(id_usuario);


-- Completed on 2025-08-31 16:56:48

--
-- PostgreSQL database dump complete
--

